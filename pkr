#!/usr/bin/env Rscript

"pkr :: Command line package management for R based on packrat

Usage:
  pkr init [--verbose]
  pkr (in | install) ([<inpkg>...] | [--file=<pkr-file>]) [--global] [--verbose]
  pkr (rm | remove) <rmpkg>... [--global] [--verbose]
  pkr status [--verbose]
  pkr clean [--verbose]
  pkr test [--verbose]
  pkr lint [--verbose]
  pkr script-install <script> [--verbose]
  pkr script-list [--verbose]
  pkr script-remove <script> [--verbose]
  pkr script-new <script> [--verbose]
  pkr self check-update
  pkr -h | --help
  pkr -v | --version

Arguments:
  init             Initialize packrat project
  in, install      Install packages / scripts
  rm, remove       Remove packages / scripts
  ls, list         List installed scripts
  status           Show installed packages
  clean            Remove unused packages
  test             Run tests
  lint             Lint *.R files

Options:
  --global         Use global package installation location
  --verbose        Don't suppress output
  -h --help        Print this help
  -v --version     Show version number" -> doc

## Don't bug me!
default_mirror <- "http://cran.us.r-project.org"
update_url <- "https://raw.githubusercontent.com/reichlab/pkr/master/pkr"
pkr_bin_path <- "~/.pkr/bin"
debug <- FALSE
version <- "v0.4.5"

check_new_version <- function() {
  destfile <- tempfile()
  download.file(update_url, destfile, quiet = TRUE)
  version_line <- grep("^version", readLines(destfile), value = TRUE)
  new_version <- gsub("version\ *<-\ *", "", version_line)
  gsub("\"", "", new_version)
}

#' Check if in a packrat project, exit if not
#' Turn on packrat mode
check_packrat <- function() {
  if (!file.exists("./packrat")) {
    stop("Not in a packrat project. Run `pkr init` first.")
  } else {
    packrat::on()
  }
}

get_package_name <- function(package_id) {
  if (startsWith(package_id, ".")) {
    ## This is a local package
    name_line <- Find(function(l) {
      startsWith(l, "Package:")
    }, readLines(file.path(package_id, "DESCRIPTION"), encoding = "UTF8"))
    trimws(strsplit(name_line, ":")[[1]][2])
  } else {
    ## This is either github or cran package
    splits <- strsplit(package_id, "/")[[1]]
    if (length(splits) == 1) package_id else splits[length(splits)]
  }
}

#' Check if package_id is installed
installed_p <- function(package_id) {
  requireNamespace(get_package_name(package_id), quietly = !debug)
}

#' Install package given as pkr style package id
install <- function(package_id) {
  if (startsWith(package_id, ".")) {
    cat(paste0("pkr:: Installing local package ",
               get_package_name(package_id), "\n"))
    devtools::install(package_id, quiet = !debug)
  }
  else {
    splits <- strsplit(package_id, "/")[[1]]

    if (length(splits) == 1) {
      ## This is plain CRAN package
      cat(paste0("pkr:: Installing CRAN package ",
                 get_package_name(package_id), "\n"))
      install.packages(package_id, repos = default_mirror, quiet = !debug)
    } else if (length(splits) == 2) {
      cat(paste0("pkr:: Installing github package ",
                 get_package_name(package_id), "\n"))
      ## gh package of type user/repo
      devtools::install_github(package_id, quiet = !debug)
    } else {
      cat(paste0("pkr:: Installing github package ",
                 get_package_name(package_id), "\n"))
      ## gh package of type user/repo/sub/dir
      devtools::install_github(
                  paste(splits[1:2], collapse = "/"),
                  subdir = paste(splits[3:length(splits)], collapse = "/"),
                  quiet = !debug
                )
    }
  }
}

#' Install package if not found
check_and_install <- function(package_id) {
  if (!installed_p(package_id)) {
    install(package_id)
  }
}

#' Get package ids from a file (allows # style comments)
read_package_ids_from_file <- function(file_name) {
  lines <- readLines(file_name)
  Filter(function(x) (nchar(x) > 0) && (!startsWith(x, "#")), lines)
}

#' Initialize packrat repo with speed-ish settings
init_packrat <- function() {
  packrat::set_opts(vcs.ignore.src = TRUE)
  packrat::set_opts(use.cache = TRUE)
  packrat::init()
}

#' Setup bin directory for scripts
setup_pkr_bin <- function(pkr_bin = pkr_bin_path) {
  if (!dir.exists(pkr_bin)) {
    cat("pkr:: Setting up pkr bin directory...\n")
    dir.create(pkr_bin, showWarnings = FALSE, recursive = TRUE)
  }
}

#' Setup self dependencies
self_setup <- function() {
  for (package_id in c("docopt", "packrat", "devtools")) {
    check_and_install(package_id)
  }
}

## Entry point
if (installed_p("packrat")) {
  packrat::off()
}
self_setup()
opts <- docopt::docopt(doc, version = version)

debug <- opts[["--verbose"]]

if (opts[["init"]]) {
  init_packrat()
} else if (opts[["in"]] || opts[["install"]]) {

  if(length(opts[["--file"]]) == 1) {
    to_install <- read_package_ids_from_file(opts[["--file"]])
  } else {
    to_install <- opts[["<inpkg>"]]
  }

  ## Install given packages
  if (opts[["--global"]]) {
    packrat::off()
    cat("pkr:: Using global path\n")
    if (length(to_install) == 0) {
      stop("Provide at least one package")
    }
  } else {
    check_packrat()
  }

  if (length(to_install) == 0) {
    init_packrat()
  } else {
    for (package_id in to_install[!sapply(to_install, installed_p)]) {
      install(package_id)
    }
  }

 } else if (opts[["rm"]] || opts[["remove"]]) {
  if (opts[["--global"]]) {
    packrat::off()
    cat("pkr:: Using global path\n")
  } else {
    check_packrat()
  }
  remove.packages(opts[["<rmpkg>"]])
} else if (opts[["status"]]) {
  check_packrat()
  packrat::status()
} else if (opts[["clean"]]) {
  check_packrat()
  packrat::clean()
} else if (opts[["lint"]]) {
  check_and_install("lintr")
  lintr::lint_package()
} else if (opts[["test"]]) {
  check_and_install("testthat")
  system("R CMD check")
} else if (opts[["script-new"]]) {
  setup_pkr_bin()
  name <- opts[["<script>"]]
  target_file <- file.path(pkr_bin_path, name)
  stub <- c(
    "#!/usr/bin/env Rscript",
    "",
    paste("\"usage:", name, "\" -> doc"),
    "",
    "opts <- docopt::docopt(doc)"
  )
  writeLines(stub, target_file)
  Sys.chmod(target_file, mode = "755")
  cat(paste0("pkr:: Created new script at ", target_file, "\n"))
} else if (opts[["script-install"]]) {
  setup_pkr_bin()
  source_file <- opts[["<script>"]]
  script_name <- gsub(".R$", "", basename(source_file))
  target_file <- file.path(pkr_bin_path, script_name)
  cat(paste0("pkr:: Setting up ", target_file, "\n"))
  file.copy(from = source_file, to = target_file, overwrite = TRUE)
  Sys.chmod(target_file, mode = "755")
  setwd(pkr_bin_path)
  init_packrat()
} else if (opts[["script-remove"]]) {
  setup_pkr_bin()
  target_file <- file.path(pkr_bin_path, opts[["<script>"]])
  unlink(target_file)
} else if (opts[["script-list"]]) {
  setup_pkr_bin()
  scripts <- list.files(pkr_bin_path)

  cat(paste0("pkr:: ", length(scripts), " installed scripts\n"))
  for (name in scripts) {
    cat(paste0("  - ", name, "\n"))
  }
} else if (opts[["self"]]) {
  if (opts[["check-update"]]) {
    new_version <- check_new_version()

    if (new_version == version) {
      cat(sprintf("Up to date (running version %s)\n", version))
    } else {
      cat(sprintf("Available version %s (running version %s)\n", new_version, version))
    }
  }
}
